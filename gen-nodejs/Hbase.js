//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./Hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

var Hbase_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_enableTable_args.prototype = {};
Hbase_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_enableTable_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_enableTable_result.prototype = {};
Hbase_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_disableTable_args.prototype = {};
Hbase_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_disableTable_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_disableTable_result.prototype = {};
Hbase_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_isTableEnabled_args.prototype = {};
Hbase_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_isTableEnabled_result.prototype = {};
Hbase_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_compact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (!args.tableNameOrRegionName) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_compact_args.prototype = {};
Hbase_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_args');
  if (this.tableNameOrRegionName) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_compact_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_compact_result.prototype = {};
Hbase_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_majorCompact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (!args.tableNameOrRegionName) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_majorCompact_args.prototype = {};
Hbase_majorCompact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_args');
  if (this.tableNameOrRegionName) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_majorCompact_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_majorCompact_result.prototype = {};
Hbase_majorCompact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableNames_args = function(args) {
};
Hbase_getTableNames_args.prototype = {};
Hbase_getTableNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableNames_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getTableNames_result.prototype = {};
Hbase_getTableNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getColumnDescriptors_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getColumnDescriptors_args.prototype = {};
Hbase_getColumnDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getColumnDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getColumnDescriptors_result.prototype = {};
Hbase_getColumnDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.success = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          key32 = null;
          val33 = null;
          key32 = input.readString();
          val33 = new ttypes.ColumnDescriptor();
          val33.read(input);
          this.success[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter34 in this.success)
    {
      if (this.success.hasOwnProperty(kiter34))
      {
        var viter35 = this.success[kiter34];
        output.writeString(kiter34);
        viter35.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableRegions_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getTableRegions_args.prototype = {};
Hbase_getTableRegions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getTableRegions_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getTableRegions_result.prototype = {};
Hbase_getTableRegions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.success = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new ttypes.TRegionInfo();
          elem42.read(input);
          this.success.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter43 in this.success)
    {
      if (this.success.hasOwnProperty(iter43))
      {
        iter43 = this.success[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_createTable_args = function(args) {
  this.tableName = null;
  this.columnFamilies = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.columnFamilies) {
      this.columnFamilies = args.columnFamilies;
    }
  }
};
Hbase_createTable_args.prototype = {};
Hbase_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.columnFamilies = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.ColumnDescriptor();
          elem50.read(input);
          this.columnFamilies.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnFamilies) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length);
    for (var iter51 in this.columnFamilies)
    {
      if (this.columnFamilies.hasOwnProperty(iter51))
      {
        iter51 = this.columnFamilies[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_createTable_result = function(args) {
  this.io = null;
  this.ia = null;
  this.exist = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
    if (!args.exist) {
      this.exist = args.exist;
    }
  }
};
Hbase_createTable_result.prototype = {};
Hbase_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists();
        this.exist.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.exist) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3);
    this.exist.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_deleteTable_args.prototype = {};
Hbase_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteTable_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_deleteTable_result.prototype = {};
Hbase_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_get_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
  }
};
Hbase_get_args.prototype = {};
Hbase_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_get_result.prototype = {};
Hbase_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.success = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new ttypes.TCell();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success)
    {
      if (this.success.hasOwnProperty(iter59))
      {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVer_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.numVersions = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
    if (!args.numVersions) {
      this.numVersions = args.numVersions;
    }
  }
};
Hbase_getVer_args.prototype = {};
Hbase_getVer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.numVersions) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVer_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getVer_result.prototype = {};
Hbase_getVer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.success = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new ttypes.TCell();
          elem66.read(input);
          this.success.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter67 in this.success)
    {
      if (this.success.hasOwnProperty(iter67))
      {
        iter67 = this.success[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVerTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.numVersions = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
    if (!args.numVersions) {
      this.numVersions = args.numVersions;
    }
  }
};
Hbase_getVerTs_args.prototype = {};
Hbase_getVerTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.numVersions) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getVerTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getVerTs_result.prototype = {};
Hbase_getVerTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.TCell();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
  }
};
Hbase_getRow_args.prototype = {};
Hbase_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRow_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getRow_result.prototype = {};
Hbase_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.success = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.TRowResult();
          elem82.read(input);
          this.success.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter83 in this.success)
    {
      if (this.success.hasOwnProperty(iter83))
      {
        iter83 = this.success[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumns_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
  }
};
Hbase_getRowWithColumns_args.prototype = {};
Hbase_getRowWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.columns = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString();
          this.columns.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter91 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter91))
      {
        iter91 = this.columns[iter91];
        output.writeString(iter91);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumns_result.prototype = {};
Hbase_getRowWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.success = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new ttypes.TRowResult();
          elem98.read(input);
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter99 in this.success)
    {
      if (this.success.hasOwnProperty(iter99))
      {
        iter99 = this.success[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_getRowTs_args.prototype = {};
Hbase_getRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getRowTs_result.prototype = {};
Hbase_getRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.success = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new ttypes.TRowResult();
          elem106.read(input);
          this.success.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter107 in this.success)
    {
      if (this.success.hasOwnProperty(iter107))
      {
        iter107 = this.success[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_getRowWithColumnsTs_args.prototype = {};
Hbase_getRowWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.columns = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = input.readString();
          this.columns.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter115 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter115))
      {
        iter115 = this.columns[iter115];
        output.writeString(iter115);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_getRowWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumnsTs_result.prototype = {};
Hbase_getRowWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.success = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new ttypes.TRowResult();
          elem122.read(input);
          this.success.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter123 in this.success)
    {
      if (this.success.hasOwnProperty(iter123))
      {
        iter123 = this.success[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.mutations) {
      this.mutations = args.mutations;
    }
  }
};
Hbase_mutateRow_args.prototype = {};
Hbase_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.mutations = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.Mutation();
          elem130.read(input);
          this.mutations.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter131 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter131))
      {
        iter131 = this.mutations[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRow_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRow_result.prototype = {};
Hbase_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.mutations) {
      this.mutations = args.mutations;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_mutateRowTs_args.prototype = {};
Hbase_mutateRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.mutations = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.Mutation();
          elem138.read(input);
          this.mutations.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter139 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter139))
      {
        iter139 = this.mutations[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowTs_result.prototype = {};
Hbase_mutateRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRows_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.rowBatches) {
      this.rowBatches = args.rowBatches;
    }
  }
};
Hbase_mutateRows_args.prototype = {};
Hbase_mutateRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.rowBatches = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.BatchMutation();
          elem146.read(input);
          this.rowBatches.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter147 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter147))
      {
        iter147 = this.rowBatches[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRows_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRows_result.prototype = {};
Hbase_mutateRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowsTs_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.rowBatches) {
      this.rowBatches = args.rowBatches;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_mutateRowsTs_args.prototype = {};
Hbase_mutateRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.rowBatches = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.BatchMutation();
          elem154.read(input);
          this.rowBatches.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter155 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter155))
      {
        iter155 = this.rowBatches[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_mutateRowsTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowsTs_result.prototype = {};
Hbase_mutateRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_atomicIncrement_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
    if (!args.value) {
      this.value = args.value;
    }
  }
};
Hbase_atomicIncrement_args.prototype = {};
Hbase_atomicIncrement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_atomicIncrement_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_atomicIncrement_result.prototype = {};
Hbase_atomicIncrement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAll_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
  }
};
Hbase_deleteAll_args.prototype = {};
Hbase_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAll_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAll_result.prototype = {};
Hbase_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.column) {
      this.column = args.column;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_deleteAllTs_args.prototype = {};
Hbase_deleteAllTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllTs_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllTs_result.prototype = {};
Hbase_deleteAllTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
  }
};
Hbase_deleteAllRow_args.prototype = {};
Hbase_deleteAllRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRow_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRow_result.prototype = {};
Hbase_deleteAllRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.row) {
      this.row = args.row;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_deleteAllRowTs_args.prototype = {};
Hbase_deleteAllRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_deleteAllRowTs_result = function(args) {
  this.io = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRowTs_result.prototype = {};
Hbase_deleteAllRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpen_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.startRow) {
      this.startRow = args.startRow;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
  }
};
Hbase_scannerOpen_args.prototype = {};
Hbase_scannerOpen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.columns = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readString();
          this.columns.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter163 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter163))
      {
        iter163 = this.columns[iter163];
        output.writeString(iter163);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpen_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpen_result.prototype = {};
Hbase_scannerOpen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStop_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.startRow) {
      this.startRow = args.startRow;
    }
    if (!args.stopRow) {
      this.stopRow = args.stopRow;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
  }
};
Hbase_scannerOpenWithStop_args.prototype = {};
Hbase_scannerOpenWithStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.columns = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = input.readString();
          this.columns.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter171 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter171))
      {
        iter171 = this.columns[iter171];
        output.writeString(iter171);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStop_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStop_result.prototype = {};
Hbase_scannerOpenWithStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithPrefix_args = function(args) {
  this.tableName = null;
  this.startAndPrefix = null;
  this.columns = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.startAndPrefix) {
      this.startAndPrefix = args.startAndPrefix;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
  }
};
Hbase_scannerOpenWithPrefix_args.prototype = {};
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.columns = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = input.readString();
          this.columns.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startAndPrefix) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2);
    output.writeString(this.startAndPrefix);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter179 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter179))
      {
        iter179 = this.columns[iter179];
        output.writeString(iter179);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithPrefix_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithPrefix_result.prototype = {};
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.startRow) {
      this.startRow = args.startRow;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_scannerOpenTs_args.prototype = {};
Hbase_scannerOpenTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.columns = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = input.readString();
          this.columns.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter187 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter187))
      {
        iter187 = this.columns[iter187];
        output.writeString(iter187);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenTs_result.prototype = {};
Hbase_scannerOpenTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStopTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.timestamp = null;
  if (args) {
    if (!args.tableName) {
      this.tableName = args.tableName;
    }
    if (!args.startRow) {
      this.startRow = args.startRow;
    }
    if (!args.stopRow) {
      this.stopRow = args.stopRow;
    }
    if (!args.columns) {
      this.columns = args.columns;
    }
    if (!args.timestamp) {
      this.timestamp = args.timestamp;
    }
  }
};
Hbase_scannerOpenWithStopTs_args.prototype = {};
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.columns = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = input.readString();
          this.columns.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args');
  if (this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter195 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter195))
      {
        iter195 = this.columns[iter195];
        output.writeString(iter195);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerOpenWithStopTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStopTs_result.prototype = {};
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGet_args = function(args) {
  this.id = null;
  if (args) {
    if (!args.id) {
      this.id = args.id;
    }
  }
};
Hbase_scannerGet_args.prototype = {};
Hbase_scannerGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGet_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGet_result.prototype = {};
Hbase_scannerGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.success = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.TRowResult();
          elem202.read(input);
          this.success.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter203 in this.success)
    {
      if (this.success.hasOwnProperty(iter203))
      {
        iter203 = this.success[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGetList_args = function(args) {
  this.id = null;
  this.nbRows = null;
  if (args) {
    if (!args.id) {
      this.id = args.id;
    }
    if (!args.nbRows) {
      this.nbRows = args.nbRows;
    }
  }
};
Hbase_scannerGetList_args.prototype = {};
Hbase_scannerGetList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nbRows) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2);
    output.writeI32(this.nbRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerGetList_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.success) {
      this.success = args.success;
    }
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGetList_result.prototype = {};
Hbase_scannerGetList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.success = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = new ttypes.TRowResult();
          elem210.read(input);
          this.success.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter211 in this.success)
    {
      if (this.success.hasOwnProperty(iter211))
      {
        iter211 = this.success[iter211];
        iter211.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerClose_args = function(args) {
  this.id = null;
  if (args) {
    if (!args.id) {
      this.id = args.id;
    }
  }
};
Hbase_scannerClose_args.prototype = {};
Hbase_scannerClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Hbase_scannerClose_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args) {
    if (!args.io) {
      this.io = args.io;
    }
    if (!args.ia) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerClose_result.prototype = {};
Hbase_scannerClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_result');
  if (this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HbaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
HbaseClient.prototype = {};
HbaseClient.prototype.enableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_enableTable(tableName);
};

HbaseClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_enableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.disableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_disableTable(tableName);
};

HbaseClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_disableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.isTableEnabled = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_isTableEnabled(tableName);
};

HbaseClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_isTableEnabled_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};
HbaseClient.prototype.compact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_compact(tableNameOrRegionName);
};

HbaseClient.prototype.send_compact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_compact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.majorCompact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_majorCompact(tableNameOrRegionName);
};

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_majorCompact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_majorCompact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.getTableNames = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getTableNames();
};

HbaseClient.prototype.send_getTableNames = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableNames_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNames failed: unknown result');
};
HbaseClient.prototype.getColumnDescriptors = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getColumnDescriptors(tableName);
};

HbaseClient.prototype.send_getColumnDescriptors = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getColumnDescriptors_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnDescriptors failed: unknown result');
};
HbaseClient.prototype.getTableRegions = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getTableRegions(tableName);
};

HbaseClient.prototype.send_getTableRegions = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableRegions_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableRegions failed: unknown result');
};
HbaseClient.prototype.createTable = function(tableName, columnFamilies, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createTable(tableName, columnFamilies);
};

HbaseClient.prototype.send_createTable = function(tableName, columnFamilies) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_createTable_args();
  args.tableName = tableName;
  args.columnFamilies = columnFamilies;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.exist) {
    return callback(result.exist);
  }
  callback(null)
};
HbaseClient.prototype.deleteTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteTable(tableName);
};

HbaseClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.get = function(tableName, row, column, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get(tableName, row, column);
};

HbaseClient.prototype.send_get = function(tableName, row, column) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_get_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
HbaseClient.prototype.getVer = function(tableName, row, column, numVersions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getVer(tableName, row, column, numVersions);
};

HbaseClient.prototype.send_getVer = function(tableName, row, column, numVersions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVer_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.numVersions = numVersions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVer failed: unknown result');
};
HbaseClient.prototype.getVerTs = function(tableName, row, column, timestamp, numVersions, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getVerTs(tableName, row, column, timestamp, numVersions);
};

HbaseClient.prototype.send_getVerTs = function(tableName, row, column, timestamp, numVersions) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVerTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.numVersions = numVersions;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVerTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVerTs failed: unknown result');
};
HbaseClient.prototype.getRow = function(tableName, row, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRow(tableName, row);
};

HbaseClient.prototype.send_getRow = function(tableName, row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRow_args();
  args.tableName = tableName;
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};
HbaseClient.prototype.getRowWithColumns = function(tableName, row, columns, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowWithColumns(tableName, row, columns);
};

HbaseClient.prototype.send_getRowWithColumns = function(tableName, row, columns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumns_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowTs = function(tableName, row, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowTs(tableName, row, timestamp);
};

HbaseClient.prototype.send_getRowTs = function(tableName, row, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowTs failed: unknown result');
};
HbaseClient.prototype.getRowWithColumnsTs = function(tableName, row, columns, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp);
};

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName, row, columns, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumnsTs_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.mutateRow = function(tableName, row, mutations, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRow(tableName, row, mutations);
};

HbaseClient.prototype.send_mutateRow = function(tableName, row, mutations) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRow_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowTs = function(tableName, row, mutations, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRowTs(tableName, row, mutations, timestamp);
};

HbaseClient.prototype.send_mutateRowTs = function(tableName, row, mutations, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRows = function(tableName, rowBatches, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRows(tableName, rowBatches);
};

HbaseClient.prototype.send_mutateRows = function(tableName, rowBatches) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRows_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowsTs = function(tableName, rowBatches, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRowsTs(tableName, rowBatches, timestamp);
};

HbaseClient.prototype.send_mutateRowsTs = function(tableName, rowBatches, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowsTs_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.atomicIncrement = function(tableName, row, column, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_atomicIncrement(tableName, row, column, value);
};

HbaseClient.prototype.send_atomicIncrement = function(tableName, row, column, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_atomicIncrement_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('atomicIncrement failed: unknown result');
};
HbaseClient.prototype.deleteAll = function(tableName, row, column, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAll(tableName, row, column);
};

HbaseClient.prototype.send_deleteAll = function(tableName, row, column) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAll_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllTs = function(tableName, row, column, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllTs(tableName, row, column, timestamp);
};

HbaseClient.prototype.send_deleteAllTs = function(tableName, row, column, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRow = function(tableName, row, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllRow(tableName, row);
};

HbaseClient.prototype.send_deleteAllRow = function(tableName, row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRow_args();
  args.tableName = tableName;
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRowTs = function(tableName, row, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllRowTs(tableName, row, timestamp);
};

HbaseClient.prototype.send_deleteAllRowTs = function(tableName, row, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.scannerOpen = function(tableName, startRow, columns, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpen(tableName, startRow, columns);
};

HbaseClient.prototype.send_scannerOpen = function(tableName, startRow, columns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpen_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpen failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStop = function(tableName, startRow, stopRow, columns, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns);
};

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName, startRow, stopRow, columns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStop_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStop failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns);
};

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName, startAndPrefix, columns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.tableName = tableName;
  args.startAndPrefix = startAndPrefix;
  args.columns = columns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithPrefix failed: unknown result');
};
HbaseClient.prototype.scannerOpenTs = function(tableName, startRow, columns, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp);
};

HbaseClient.prototype.send_scannerOpenTs = function(tableName, startRow, columns, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenTs failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp);
};

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStopTs failed: unknown result');
};
HbaseClient.prototype.scannerGet = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerGet(id);
};

HbaseClient.prototype.send_scannerGet = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGet_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGet failed: unknown result');
};
HbaseClient.prototype.scannerGetList = function(id, nbRows, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerGetList(id, nbRows);
};

HbaseClient.prototype.send_scannerGetList = function(id, nbRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGetList_args();
  args.id = id;
  args.nbRows = nbRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGetList failed: unknown result');
};
HbaseClient.prototype.scannerClose = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerClose(id);
};

HbaseClient.prototype.send_scannerClose = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerClose_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerClose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
var HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_enableTable_result();
  this._handler.enableTable(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_disableTable_result();
  this._handler.disableTable(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_isTableEnabled_result();
  this._handler.isTableEnabled(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_compact_result();
  this._handler.compact(args.tableNameOrRegionName, function (success) {
    result.success = success;
    output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_majorCompact_result();
  this._handler.majorCompact(args.tableNameOrRegionName, function (success) {
    result.success = success;
    output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getTableNames_result();
  this._handler.getTableNames(function (success) {
    result.success = success;
    output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getColumnDescriptors_result();
  this._handler.getColumnDescriptors(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getTableRegions_result();
  this._handler.getTableRegions(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_createTable_result();
  this._handler.createTable(args.tableName, args.columnFamilies, function (success) {
    result.success = success;
    output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_deleteTable_result();
  this._handler.deleteTable(args.tableName, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_get_result();
  this._handler.get(args.tableName, args.row, args.column, function (success) {
    result.success = success;
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getVer_result();
  this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, function (success) {
    result.success = success;
    output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getVerTs_result();
  this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, function (success) {
    result.success = success;
    output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getRow_result();
  this._handler.getRow(args.tableName, args.row, function (success) {
    result.success = success;
    output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getRowWithColumns_result();
  this._handler.getRowWithColumns(args.tableName, args.row, args.columns, function (success) {
    result.success = success;
    output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getRowTs_result();
  this._handler.getRowTs(args.tableName, args.row, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_getRowWithColumnsTs_result();
  this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_mutateRow_result();
  this._handler.mutateRow(args.tableName, args.row, args.mutations, function (success) {
    result.success = success;
    output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_mutateRowTs_result();
  this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_mutateRows_result();
  this._handler.mutateRows(args.tableName, args.rowBatches, function (success) {
    result.success = success;
    output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_mutateRowsTs_result();
  this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_atomicIncrement_result();
  this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value, function (success) {
    result.success = success;
    output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_deleteAll_result();
  this._handler.deleteAll(args.tableName, args.row, args.column, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_deleteAllTs_result();
  this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_deleteAllRow_result();
  this._handler.deleteAllRow(args.tableName, args.row, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_deleteAllRowTs_result();
  this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerOpen_result();
  this._handler.scannerOpen(args.tableName, args.startRow, args.columns, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerOpenWithStop_result();
  this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerOpenWithPrefix_result();
  this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerOpenTs_result();
  this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerOpenWithStopTs_result();
  this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerGet_result();
  this._handler.scannerGet(args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerGetList_result();
  this._handler.scannerGetList(args.id, args.nbRows, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Hbase_scannerClose_result();
  this._handler.scannerClose(args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

